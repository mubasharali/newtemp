
<button data-bind="click:function(){ return sendMessage12()}" class="btn btn-primary pull-right">Chat with seller</button>

<div style="display:none">
    <div id="ad_id">2823</div>
    <div id="ad_category">Mobiles</div>
    <div id="loginUserId">c1239071-cf6d-4cec-9da4-4b2871250143</div>
    <div id="postedByName">new32</div>
</div>

<span class="alert alert-success" data-bind="visible:isRefreshable">
        <strong> Is your ad still valid? </strong>
        <a data-bind="click: function(){return Refresh(id)}" class="btn btn-white btn-lg "> Refresh</a>
        <strong>OR delete it</strong>
        <a data-bind="click: function(){return deleteAd(id)}" class="btn btn-white btn-lg  confirmDelete"> Delete</a>
        <br /><br />
    </span>



<span data-toggle="modal" data-target="#report"><span data-bind="style:{color: isReported()? 'red' : 'gray'}"> <i class="fa fa-flag"></i> </span> Report </span>

<!-- Modal -->
<div class="modal inmodal" id="report" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content animated ">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <i class="fa fa-flag modal-icon"></i>
                <h4 class="modal-title">Report Ad</h4>
                <small class="font-bold">Make sure you have provided right information or you can loose reputation</small>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <div class="col-sm-offset-3 ">
                        <div class="radio">
                            <label>
                                <input class="radio i-checks" type="radio" data-bind="checked: selectedVal" name="report" value="duplicate" required /> Ad is duplicate
                            </label>
                        </div>
                        <div class="radio">
                            <label>
                                <input class="radio i-checks" type="radio" data-bind="checked: selectedVal " name="report" value="wrong_category" required /> Wrong category
                            </label>
                        </div>
                        <div class="radio">
                            <label>
                                <input class="radio i-checks" type="radio" data-bind="checked: selectedVal " name="report" value="Irrelevent_content" required /> Irrelevent content
                            </label>
                        </div>
                        <div class="radio">
                            <label>
                                <input class="radio i-checks" type="radio" data-bind="checked: selectedVal " name="report" value="spam" required /> Spam/Offensive content
                            </label>
                        </div>
                        <div class="radio">
                            <label>
                                <input class="radio i-checks" type="radio" data-bind="checked: selectedVal" name="report" value="fraud" required /> Fraud reason
                            </label>
                        </div>
                    </div>
                    <label>Addational details:</label>
                    <textarea class="msgTextArea form-control" placeholder="Addational info.." data-bind="jqAutoresize: {},value:reportText"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-white" data-dismiss="modal">I didn't mean to</button>

                <button type="button" data-bind="click: function(){ return report()}" class="btn btn-primary">Submit</button>
            </div>
        </div>
    </div>
</div>  






<button data-bind="click:saveItem" id="savedCount" class="btn btn-white btn-sm"><i data-bind="style:{color: isSaved()? 'red' : 'gray'}" class="fa fa-star"></i> <span data-bind="visible:isSaved()"> Remove from</span><span data-bind="visible:!isSaved()"> Add to</span>  wishlist </button>


<button data-bind="click:placeBidButton" class="btn btn-primary pull-right">Place Bid</button>

<h2>Bidding:</h2>
<div data-bind="visible:placeBid">
    <div class="form-group">
        <div class="row">
            <label class="control-label col-sm-2">Bid amount</label>
            <div class="col-sm-8">
                <div class="input-group m-b">
                    <span class="input-group-addon">Rs</span><input type="number" placeholder="place bid.." data-bind="value:newBidPrice" class="form-control" pattern="[0-9]*" name="price" required />
                </div>
            </div>
            <div class="col-sm-2"><button data-style="expand-left" class="ladda-button btn btn-success" data-bind="click:postBid">Submit</button></div>
        </div>
    </div>

</div>
<span data-bind="text:showBidings().length"></span><text> bidding</text>
    <ul class="sortable-list connectList agile-list" data-bind="foreach:showBidings">
        <li class="success-element">
            <span data-bind="visible:!isEditing()">
                <a data-bind="attr:{href:postedByProfileLink}"><span data-bind="text:postedByName"></span></a>
                <strong class="col-xs-offset-3"> Rs <span data-bind="text:price"></span></strong>
                <div class="agile-detail">
                    <div data-bind="if:loginUserId() == postedById">
                        <a data-bind="click:$parent.deleteBid" class="pull-right btn btn-xs btn-white">Delete</a><a data-bind="click:editBidButton" class="pull-right btn btn-xs btn-white">Edit</a>
                    </div>
                    <i class="fa fa-clock-o"></i> <span data-bind="text:time"></span>
                </div>
            </span>
            <span data-bind="visible:isEditing()">
                <div class="input-group m-b">
                    <span class="input-group-addon">Rs</span><input type="number" data-bind="value:price" class="form-control" pattern="[0-9]*" name="price" required />
                </div>
                <button data-style="zoom-out" id="updateBid" class="ladda-button btn btn-success" data-bind="click:function(){return updateBid($parent.id)}">Update</button>
            </span>
        </li>
    </ul>
@Html.Partial("~/Views/Shared/_Comments.cshtml")
@section Styles {
    @Styles.Render("~/plugins/slickStyles")
    @Styles.Render("~/plugins/slickThemeStyles")
    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/plugins/sweetAlertStyles")
}


@section Scripts{
@Scripts.Render("~/plugins/timeago")
@Scripts.Render("~/plugins/autosize")
@Scripts.Render("~/plugins/slick")
@Scripts.Render("~/plugins/sweetAlert")
<script src="~/Scripts/_Comments.js"></script>
<script src="~/Scripts/app/chat.js"></script>
    <script>
        $id = $("#ad_id").text();
        $category = $("#ad_category").text();
        $subcategory = $("#ad_subcategory").text();
        $subsubcategory = $("#subsubcategory").text();
        $name = $("#postedByName").text();
        $loginUserId = $("#loginUserId").text();
        loginUserId = ko.observable($loginUserId);

        function Biding(data) {
            var self = this;
            data = data || {};
            self.postedById = data.postedById;
            self.postedByName = data.postedByName;
            self.postedByProfileLink = '/User/Index/' + self.postedById;
            self.exectTime = data.time;
            self.time = getTimeAgo(data.time);
            self.id = data.id;
            self.price = ko.observable(data.price);
            self.isEditing = ko.observable(false);
            self.editBidButton = function () {
                self.isEditing(true);
            }
            self.updateBid = function () {
                self.time = self.exectTime;
                self.postedBy = self.postedById;
                self.adId = $id;
                var updateBidLoader = $('#updateBid').ladda();
                updateBidLoader.ladda('start');
                $.ajax({
                    url: '/api/Electronic/UpdateBid',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    data: ko.toJSON(self),
                    success: function (data) {
                        self.isEditing(false);
                        updateBidLoader.ladda('stop');
                    },
                    error: function () {
                        updateBidLoader.ladda('stop');
                        toastr.error("failed to update Bid. Please refresh page and try again", "Error!");
                    }
                });
            }
        }
        var isSaved = ko.observable(false);
        var saveItem = function () {
            if ($loginUserId) {
                $.ajax({
                    url: '/api/User/SaveItem/' + $id,
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                      //  $("#savedCount").text(data.count);
                        if (data.text == "Deleted") {
                            self.isSaved(false);

                        } else {
                            self.isSaved(true);
                        }
                    },
                    error: function () {
                        toastr.error("failed to Save. Please refresh page and try again", "Error!");
                    }
                });
            }
            else {
                loginBtn();
            }
        }

        function GetBidsAndComments(self) {
            $.ajax({
                url: '/api/Electronic/GetBidsAndComments?id=' + $id,
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: 'GET',
                // data: ko.toJSON(data),
                success: function (data) {
                    $("#showBids").css({ "display": "block" });
                    $("#showComments").css({ "display": "block" });

                    var mappedads = $.map(data.bid, function (item) { return new Biding(item); });
                    self.showBidings(mappedads);
                    var mappedads = $.map(data.comment, function (item) { return new comment(item); });
                    self.showComment(mappedads);
                    //var length = $(window).width();
                    //if (length < 786) { //770
                    //    $(".product-price").css({ "color": "green", "background": "none" });
                    //}
                    //SimilarData();
                },
                error: function (xhr, status, error) {
                    var err = eval("(" + xhr.responseText + ")");
                    toastr.info(err.Message);
                }
            });
        }
        function Report(self) {
            self.selectedVal = ko.observable("spam");
            self.reportText = "";
            self.report = function () {
                if ($loginUserId) {
                    var data = {
                        adId: $id,
                        details: self.reportText,
                        type: self.selectedVal(),
                    };
                    $.ajax({
                        url: '/api/Electronic/reportAd',
                        dataType: "json",
                        contentType: "application/json",
                        cache: false,
                        type: 'POST',
                        data: ko.toJSON(data),
                        success: function (data) {
                            $("#report").modal('hide');
                            toastr.info("Our team can contact you for details", "Thanks for feedback!", { onclick: function () { console.log('you clicked on the info toaster n.1') } });
                        },
                        error: function (xhr, status, error) {
                            var err = eval("(" + xhr.responseText + ")");
                            toastr.info(err.Message, null, { onclick: function () { var win = window.open("/feedback-contact", '_blank');
                                win.focus(); } });
                            $("#report").modal('hide');
                        }
                    })
                } else {
                    toastr.info("You must be login to report this item", "Oops!");
                    loginBtn();
                }
            }
        }
        function dateDiffInDays(a) {
            var _MS_PER_DAY = 1000 * 60 * 60 * 24;
            a = new Date(a);
            var d = new Date();

            var month = d.getMonth() + 1;
            var day = d.getDate();

            var b = d.getFullYear() + '/' +
                (month < 10 ? '0' : '') + month + '/' +
                (day < 10 ? '0' : '') + day;
            b = new Date(b);
            // Discard the time and time-zone information.
            var utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
            var utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());

            return Math.floor((utc2 - utc1) / _MS_PER_DAY);
        }
        function viewModel() {
            var self = this;
            self.showBidings = ko.observableArray();
            self.showComment = ko.observableArray();    
            GetBidsAndComments(self)
            SearchingLocation();
            ChatViewModel();
            AccountViewModel();
            Report(self);
            //start of report Ad
            self.isReported = ko.observable(false);
            //end of Report Ad
            self.isRefreshable = dateDiffInDays(""); //time
            if (self.isRefreshable > 15) {
                self.isRefreshable = true;
            } else {
                self.isRefreshable = false;
            }
            self.sendMessage12 = function () {

                if ($loginUserId) {
                    sendMessageTo($id);
                    sendMessgeToName($name);
                    $(".open-small-chat").trigger('click');
                } else {
                    loginBtn();
                }
            }
            //start of bidding
            self.newBidPrice = ko.observable();
            self.placeBid = ko.observable(false);
            self.placeBidButton = function () {
                if (self.placeBid()) {
                    self.placeBid(false);
                    return;
                }
                if ($loginUserId) {
                    var isalreadybid = false;
                    $.each((self.showBidings()), function (i, item) {
                        if (item.postedById == $loginUserId) {
                            isalreadybid = true;
                        }
                    });
                    if (isalreadybid) {
                        toastr.info("You cannot post multiple bids on one item. Just edit your previous bid", "Wait!");
                        return;
                    }
                    self.placeBid(true);
                } else {
                    loginBtn();
                }
            } 
            self.postBid = function () {
                if ($loginUserId) {
                    var bid = new Biding();
                    bid.adId = $id;
                    bid.postedById = $loginUserId;
                    bid.price = self.newBidPrice();
                    bid.time = new Date($.now());

                    if (bid.price >= 0 && bid.price !="") {
                        var savingBidLoader = $('.ladda-button').ladda();
                        savingBidLoader.ladda('start');
                        $.ajax({
                            url: '/api/Electronic/PostBid',
                            dataType: "json",
                            contentType: "application/json",
                            cache: false,
                            type: 'POST',
                            data: ko.toJSON(bid),
                            success: function (data) {
                                savingBidLoader.ladda('stop');
                                self.showBidings.push(new Biding(data));
                            //    self.highestBid(Math.max.apply(Math, self.showBidings().map(function (o) { return o.price(); })));
                                self.newBidPrice('');
                                //$(".sortable-list").sortable({
                                //    connectWith: ".connectList"
                                //}).disableSelection();
                                self.placeBid(false);
                            },
                            error: function () {
                                savingBidLoader.ladda('stop');
                                toastr.error("failed to Post Bid. Please refresh page and try again", "Error!");
                            }
                        });
                    } else {
                        toastr.info("Bid must be greater than 0", "Are you drunk!");
                    }
                }
                else {
                    loginBtn();
                }
            }
            self.deleteBid = function (bid) {
                swal({
                    title: "Are you sure?",
                    text: "You will not be able to recover this Bid!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, delete it!",
                    closeOnConfirm: false
                }, function () {
                    $.ajax({
                        url: '/api/Electronic/DeleteBid/' + bid.id,
                        dataType: "json",
                        contentType: "application/json",
                        cache: false,
                        type: 'POST',
                        success: function (data) {
                            self.showBidings.remove(bid);
                            swal("Deleted!", "Your Bid has been deleted.", "success");
                        },
                        error: function () {
                            swal("Error", "please refresh page and try again", "error");
                        }
                    });
                });
            }
            //end of bidding


            //start of comments posting
            var showComment = ko.observableArray();
            self.newComment = ko.observable();
            self.isCommentPosting = ko.observable(false);
            self.addcomment = function () {
                if ($loginUserId) {
                    var com = new comment();
                    com.adId = $id;
                    com.description(self.newComment());
                    //com.description(com.description().slice(0, -1));
                    if (com.description() != null && com.description().trim() != "") {
                        com.time = new Date($.now());
                        com.description = com.description().slice(0, -1);
                        self.isCommentPosting(true);
                        //self.commentsHub.server.addComment(com).fail(function (err) { toastr.error("failed to post comment ", "Error!"); });
                        $.ajax({
                            url: '/api/Comment/PostComment',
                            dataType: "json",
                            contentType: "application/json",
                            cache: false,
                            type: 'POST',
                            data: ko.toJSON(com),
                            success: function (data) {
                                self.showComment.push(new comment(data));
                                self.newComment('');
                                self.isCommentPosting(false);
                            },
                            error: function (jqXHR, status, thrownError) {
                                toastr.error("failed to post comment", "Error");
                                self.isCommentPosting(false);
                            }
                        });
                    }
                } else {
                    loginBtn();
                }
            }
            self.deleteComment = function (id) {
                $.ajax({
                    url: '/api/Comment/DeleteComment/' + id,
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    // data: ko.toJSON(id),
                    success: function (data) {
                        self.showComment.remove(function (item) {
                            return item.id == id;
                        });
                    },
                    error: function () {
                        toastr.error("failed to delete comment", "Error!");
                    }
                });
            }

            self.checkEnter = function (d, e) {
                if ($loginUserId) {
                    if (e.keyCode == 13) {
                        self.addcomment();
                    }
                } else {
                    loginBtn();
                }
            }

            //end of comments posting
        }
     //   slick1();
        function getTimeAgo(varDate) {
            if (varDate) {
                return $.timeago(varDate.toString().slice(-1) == 'Z' ? varDate : varDate + 'Z');
            }
            else {
                return '';
            }
        }
        
        ko.bindingHandlers.jqAutoresize = {
            init: function (element, valueAccessor, aBA, vm) {
                if (!$(element).hasClass('msgTextArea')) {
                    $(element).css('height', '1em');
                }
                $(element).autosize();
            }
        };

        $(function () {
            toastr.options = {
                closeButton: true,
                progressBar: true,
                preventDuplicates: true,
                positionClass: 'toast-top-right',
               // onclick: true,
            };
            ko.applyBindings(new viewModel);
        });
        
    </script>
}




