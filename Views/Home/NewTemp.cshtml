
@{
    ViewBag.Title = "NewTemp";
    Layout = null;
}

<h2>NewTemp</h2>

<style>
 
    table {
        background-color: #cde;
        padding: 1em;
        border-radius: 0.5em;
    }

        table th {
            text-align: left;
        }

            table th:last-child {
                min-width: 130px;
            }

    .starRating span {
        width: 24px;
        height: 24px;
        background-image: url(../Images/others/stars.png);
        display: inline-block;
        cursor: pointer;
        background-position: -24px 0;
    }

        .starRating span.chosen {
            background-position: 0 0;
        }

    .starRating:hover span {
        background-position: -24px 0;
    }

        .starRating:hover span.hoverChosen {
            background-position: 0 0;
        }

    input:not([type]), input[type=text], input[type=password], select {
        background-color: #FFFFCC;
        border: 1px solid gray;
        padding: 2px;
    }
</style>


<select id="example">
    <option data-html="good" value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
</select>


<div class="codeRunner">
    <table>
        <thead><tr><th>Option</th><th>Importance</th></tr></thead>
        <tbody data-bind="foreach: answers">
            <tr>
                <td data-bind="text:text"></td>
                <td data-bind="starRating: points" ></td>
            </tr>
        </tbody>
    </table>

</div> 
<div class="ibox">
    <div class="ibox-title">title</div>
    <div class="ibox-content">this is aklsjfd ajlsd
        <div class="ibox">
            <div class="ibox-title">title</div>
            <div class="ibox-content">this is aklsjfd ajlsd</div>
        </div>
    </div>
</div>


video

<video width="352" height="198" controls>
    <source src="Downloads/aa.m3u8" type="application/x-mpegURL">
</video>

@section Styles{

    
<link href="~/Content/plugins/barrating/bars-movie.css" rel="stylesheet" />
<link href="~/Content/plugins/barrating/bars-horizontal.css" rel="stylesheet" />
<link href="~/Content/plugins/barrating/fontawesome-stars.css" rel="stylesheet" />
}
@section Scripts{
<script src="~/Scripts/plugins/barrating/jquery.barrating.min.js"></script>
    @Scripts.Render("~/plugins/toastr")
    @Scripts.Render("~/plugins/timeago")
    @Scripts.Render("~/plugins/autosize")
    @Scripts.Render("~/plugins/knockout")
    @*@Scripts.Render("~/plugins/slick")
    @Scripts.Render("~/plugins/jsTree")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/sweetAlert")
    @Scripts.Render("~/scripts/selectize")*@
<script>
    // ----------------------------------------------------------------------------
    // Reusable bindings - ideally kept in a separate file
    $(function () {
        $('#example').barrating({
            theme: 'bars-movie',
            //readonly: true
        });
    });
    ko.bindingHandlers.fadeVisible = {
        init: function (element, valueAccessor) {
            // Start visible/invisible according to initial value
            var shouldDisplay = valueAccessor();
            $(element).toggle(shouldDisplay);
        },
        update: function (element, valueAccessor) {
            // On update, fade in/out
            var shouldDisplay = valueAccessor();
            shouldDisplay ? $(element).fadeIn() : $(element).fadeOut();
        }
    };

    ko.bindingHandlers.jqButton = {
        init: function (element) {
            $(element).button(); // Turns the element into a jQuery UI button
        },
        update: function (element, valueAccessor) {
            var currentValue = valueAccessor();
            // Here we just update the "disabled" state, but you could update other properties too
            $(element).button("option", "disabled", currentValue.enable === false);
        }
    };

    ko.bindingHandlers.starRating = {
        init: function (element, valueAccessor) {
            $(element).addClass("starRating");
            for (var i = 0; i < 5; i++)
                $("<span>").appendTo(element);

            // Handle mouse events on the stars
            $("span", element).each(function (index) {
                $(this).hover(
                    function () { $(this).prevAll().add(this).addClass("hoverChosen") },
                    function () { $(this).prevAll().add(this).removeClass("hoverChosen") }
                ).click(function () {
                    var observable = valueAccessor();  // Get the associated observable
                    observable(index + 1);               // Write the new rating to it
                });
            });
        },
        update: function (element, valueAccessor) {
            // Give the first x stars the "chosen" class, where x <= rating
            var observable = valueAccessor();
            $("span", element).each(function (index) {
                $(this).toggleClass("chosen", index < observable());
            });
        }
    };

    // ----------------------------------------------------------------------------
    // Page viewmodel

    function Answer(text) {
        var self = this;
        self.text = text;
        self.points = ko.observable(0);
        self.points.subscribe(function () {
            console.log(self.points());
        })
    }

    function SurveyViewModel() {
        var answers = ['a','b'];
        this.answers = $.map(answers, function (text) { return new Answer(text) });
    }

    ko.applyBindings(new SurveyViewModel());
</script>
}