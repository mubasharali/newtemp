@model Inspinia_MVC5_SeedProject.Models.ListViewModel
@using System.Configuration;
@using Inspinia_MVC5_SeedProject;
@{
    string friendlyCity = "";
    if (Session["City"] != null)
    {
        if (Session["City"].ToString() == "All Pakistan")
        {
            friendlyCity = " in Pakistan";
        }
        else
        {
            friendlyCity = " in " + Session["City"].ToString();
        }
    }

    string url = Request.Url.AbsoluteUri;
    Uri myUri = new Uri(url);
    string condition = HttpUtility.ParseQueryString(myUri.Query).Get("condition");
    string conditionTitle = "";
    if (condition != null && condition != "")
    {
        if (condition == "n")
        {
            conditionTitle = "New ";
        }
        else if (condition == "u")
        {
            conditionTitle = "Used ";
        }
    }
    string metaDescription = "Looking for" + conditionTitle + HttpUtility.ParseQueryString(myUri.Query).Get("brand") + " " + HttpUtility.ParseQueryString(myUri.Query).Get("model") + " " + (ViewBag.subcategory == null ? ViewBag.category : ViewBag.subcategory) +( friendlyCity == ""? " in Pakistan":friendlyCity ) + "? dealkar.pk is a fast growing classified portal of " + (ViewBag.subcategory == null ? ViewBag.category : ViewBag.subcategory);
    ViewBag.metaDescription = metaDescription;

    ViewBag.Title = conditionTitle + HttpUtility.ParseQueryString(myUri.Query).Get("brand") + " " + HttpUtility.ParseQueryString(myUri.Query).Get("model") + " " + (ViewBag.subcategory == null ? ViewBag.category : ViewBag.subcategory) + friendlyCity;
}
<div id="search">@ViewBag.search</div>
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-sm-4 col-md-3">
            <div class="ibox ">
                <div class="ibox-title">
                    <h5>Search Filters</h5>
                    <div class="ibox-tools">
                        <a class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div class="ibox-content">
                    @{
                        string brand = HttpUtility.ParseQueryString(myUri.Query).Get("brand");
                        string q_model = HttpUtility.ParseQueryString(myUri.Query).Get("model");
                        string mobileAccessories = HttpUtility.ParseQueryString(myUri.Query).Get("mobileAccessories");
                        string tags = HttpUtility.ParseQueryString(myUri.Query).Get("tags");
                        string minPrice = HttpUtility.ParseQueryString(myUri.Query).Get("minPrice");
                        string maxPrice = HttpUtility.ParseQueryString(myUri.Query).Get("maxPrice");
                        string q = HttpUtility.ParseQueryString(myUri.Query).Get("q");
                        //add summary to results
                        <div style="display:none">
                            <div id="q-tags">@tags</div>
                            <div id="q-minPrice">@minPrice</div>
                            <div id="q-maxPrice">@maxPrice</div>
                            <div id="q-brand">@brand</div>
                            <div id="q-model">@q_model</div>
                            <div id="condition">@condition</div>
                            <div id="mobileAccessories">@mobileAccessories</div>
                        </div>
                    }

                    <form action="/Bikes">
                        <h5>Search by Brand/Maker</h5>
                        <div class="form-group">
                            <select id="select-brand" class="demo-default" name="brand" data-bind="options: availableBrands,
                       value: selectedBrand,
                       optionsCaption: 'Choose brand...'"></select>
                        </div>
                        <div data-bind="with:selectedBrand">
                            <h5>Search by Model</h5>
                            <div class="form-group">
                                <select id="select-model" class="demo-default" name="model" data-bind="options: availableModels,
                       value: selectedModel,
                       optionsCaption: 'Choose model...'"></select>
                            </div>
                        </div>
                        <h5>Search by Price</h5>
                        <div class="row">
                            <div class="col-xs-6">
                                <div>
                                    <select id="from-price" class="demo-default" name="minPrice" data-bind="options: availableMinPrices,
                       value: selectedMinPrice,
                       optionsCaption: 'min price'"></select>
                                </div>
                            </div>
                            <div class="col-xs-6">
                                <select id="to-price" class="demo-default" name="maxPrice" data-bind="options: availableMaxPrices,
                       value: selectedMaxPrice,
                       optionsCaption: 'max price'"></select>
                            </div>
                        </div>
                        <h5>Search by Tags</h5>
                        <input id="select-tag" data-bind="value:tags" name="tags" class="repositories" placeholder="Pick tags..." /><br />
                        <button class="btn  btn-default" data-bind="click:resetFilters">Reset</button>
                        <input class="btn btn-primary pull-right" type="submit" value="Update Results" />
                        <br />
                    </form>

                </div>
            </div>
            @Html.Partial("/Views/Shared/_CreateAlert.cshtml")
            <div class="hidden-xs">
                <br />
                @*<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
                <ins class="adsbygoogle"
                     style="display:block"
                     data-ad-client="ca-pub-3540353581324370"
                     data-ad-slot="3103703247"
                     data-ad-format="auto"></ins>
                <script>
(adsbygoogle = window.adsbygoogle || []).push({});
                </script>*@
            </div>
        </div>
        <div class="col-sm-8 col-md-9 col-lg-7">
           
            <div class="row">
 <a data-bind="click:function(){ return createAd('/Vehicles/CreateBikeAd')}" data-style="expand-left" class=" pull-right btn btn-danger">Sell your Bike</a>
                @*<span data-bind="text:showAds().length"> </span> results found<br />
                    <b>Summary:</b> Showing <span data-bind="visible: !( minPrice() != 0 || maxPrice() != 50000 || searchingCity() || selectedBrand() || selectedModel() || tags() )"> all </span> <b> <span data-bind="visible:mobileAccessories()"> Mobile Accessories </span> <span data-bind="visible:!mobileAccessories()">Mobiles</span> </b><span data-bind="visible:selectedBrand || selectedModel"> of </span> <b> <span data-bind="text:selectedBrand"></span> <span data-bind="text:selectedModel"> </b>
                    <span data-bind="visible:tags()"> with tags <b> '<span data-bind="text:tags"></span>' </b></span>

                    <span data-bind="visible:minPrice()!= 0 && maxPrice()!= 50000">
                        with price from <b> <span data-bind="text:minPrice"></span> </b> to <b> <span data-bind="text:maxPrice"></span></b>
                    </span>
                    <span data-bind="visible:! (minPrice()!= 0 && maxPrice()!= 50000)">
                        <span data-bind="visible:minPrice() != 0"> with min price <b> <span data-bind="text:minPrice"></span> </b> </span>
                        <span data-bind="visible:maxPrice()!= 50000">with max price <b> <span data-bind="text:maxPrice"></span> </b> </span>
                    </span>
                    <span data-bind="visible:searchingCity"> from <b> <span data-bind="visible:searchingPP"><span data-bind="text:searchingPP"></span>,</span> <span data-bind="text:searchingCity"></span> </b> </span>*@
                <div class="">
                    @if (Model != null)
                    { <text> @Model.ItemsCount  results found
                    @foreach (var ad in Model.Items)
                    {
                        <div class="">
                            <div class="ibox">
                                <div class="ibox-content product-box">
                                    <div class="media">
                                        @if (ad.category != "Services")
                                        {
                                            <a href="/Details/@ad.Id/@ad.title.GenerateSlug()" class="pull-left">
                                                <div class="product-imitation">
                                                    <div class="carouselContainer">
                                                        @if (ad.AdImages.Count != 0)
                                                        {
                                                            <div>
                                                                <img src="@ConfigurationManager.AppSettings["aws"]@ConfigurationManager.AppSettings["Bucketname"]/@ConfigurationManager.AppSettings["FolderName"]@(ad.Id +"_1")@ad.AdImages.FirstOrDefault().imageExtension" />
                                                            </div>
                                                        }
                                                        @*<span id="gallery" data-gallery=""
                                                                                  data-bind="slick: images,
                                                            slickOptions: { initialSlide:0,dots:false, autoplay:true,autoplaySpeed: 1000,infinite: false,speed: 1000,fade: true,},
                                                            slickIndex: imageIndex">
                                                                            </span>*@
                                                        @if (ad.AdImages.Count == 0)
                                                        {
                                                            <div><h2><br /><br /><span class="hidden-xs"> <br /><br /></span> No Images<br /><br /><br /><br /><br /></h2></div>
                                                        }
                                                    </div>
                                                </div>
                                            </a>
                                        }

                                        <div class="media-body">
                                            <div class="product-desc">
                                                <span class="product-price">
                                                    @if (ad.isnegotiable != "b")
                                                    {
                                                        if (ad.price != null)
                                                        {
                                                            decimal price = ad.price.HasValue ? ad.price.Value : 0;
                                                            <text>@price.ToString("#,##0")</text><small style="font-size:13px">
                                                                Rs
                                                            </small>
                                                        }
                                                        else
                                                        {
                                                            if (ad.category == "Jobs")
                                                            {
                                                                <text>Salary</text>
                                                            }
                                                            else
                                                            {
                                                                <text>Price</text>
                                                            }
                                                            <text>on contact</text>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (ad.price != null)
                                                        {
                                                            if (ad.maxBid != null)
                                                            {
                                                                <text>@ad.maxBid.price.ToString("#,##0")</text> <small style="font-size:13px">Rs. (current Bid) </small>
                                                            }
                                                            else
                                                            {
                                                                decimal price = ad.price.HasValue ? ad.price.Value : 0;
                                                                <text>@price.ToString("#,##0")</text> <small style="font-size:13px">Rs. (Initial Bid) </small>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (ad.maxBid == null)
                                                            {
                                                                <text>No bid yet</text>
                                                            }
                                                            else
                                                            {
                                                                <text>@ad.maxBid.price.ToString("#,##0")</text> <small style="font-size:13px">Rs. (current Bid) </small>
                                                            }
                                                        }
                                                    }
                                                </span><br />
                                                <a class="product-name" href="/Details/@ad.Id/@ad.title.GenerateSlug()">@ad.title</a>


                                                <span class="hidden-xs">
                                                    <div class="small m-t-xs">
                                                        @foreach (var tag in ad.AdTags)
                                                        {
                                                            <a target="_blank" href="/Tag/@tag.tagId/@tag.Tag.name.GenerateSlug()" class="btn btn-xs btn-white">@tag.Tag.name </a>
                                                        }
                                                    </div><br />
                                                    <span>@ad.category</span> @if (ad.subcategory != null && ad.subcategory != "")
                                                    { <span> > @ad.subcategory </span> }
                                                    @if (ad.subsubcategory != null && ad.subsubcategory != "")
                                                    {
                                                        <span> > @ad.subsubcategory</span>
                                                    }
                                                    @if (ad.brand != null && ad.brand != "")
                                                    {
                                                        <span> > @ad.brand</span>
                                                    }
                                                    @if (ad.model != null && ad.model != "")
                                                    {
                                                        <span> > @ad.model</span>
                                                    } @if (ad.area != null && ad.area != "")
                                                    {
                                                        <span> > @ad.area</span>
                                                    }
                                                    @if (ad.bedroom != null && ad.bedroom != "")
                                                    {
                                                        <span> > @ad.bedroom</span>
                                                    }
                                                    @if (ad.exprience != null && ad.exprience != "")
                                                    {
                                                        <span> > @ad.exprience</span>
                                                    } @if (ad.qualification != null && ad.qualification != "")
                                                    {
                                                        <span> > @ad.qualification</span>
                                                    }
                                                    <div>@ad.description.Truncate(150)</div>
                                                </span>
                                                @*<span data-bind="visible:brand"> > <span data-bind="text:brand"></span></span> <span data-bind="visible:model"> > <span data-bind="text:model"></span></span>

                                                    <span data-bind="visible:area"><b> Area:</b> <span data-bind="text:area"> </span>sq ft </span> <span data-bind="visible:bedroom"><b> Bedroom: </b><span data-bind="text:bedroom"></span></span>
                                                                          <span data-bind="visible:exprience"><b>Experience:</b><span data-bind="if:exprience  == 'f'">Fresh Graduate</span><span data-bind="if:exprience  == 'n'">Not required</span><span data-bind="if:exprience != 'f' && exprience !='n' && exprience != ''"> <span data-bind="text:exprience"></span> year</span></span>
                                                                          <span data-bind="visible:qualification"><b>Qualification: </b><span data-bind="text:qualification"></span></span><br /><br />*@
                                                @*<div data-bind="truncatedText: description, maxTextLength: 150"></div>*@
                                                <div class="pull-right"><i class="fa fa-clock-o"></i> <span></span>@UrlHelperExtensions.Timeago(ad.time)</div>

                                                <div class="">
                                                    @if (ad.AdsLocation != null)
                                                    {
                                                        if (ad.AdsLocation.City.cityName != null && ad.AdsLocation.City.cityName != "")
                                                        {
                                                            <b class="hidden-xs">From:</b>
                                                            if (ad.AdsLocation.popularPlace != null)
                                                            {
                                                                if (ad.AdsLocation.popularPlace.name != "")
                                                                {
                                                                    <span>@ad.AdsLocation.popularPlace.name, </span>}
                                                            }
                                                            <span> @ad.AdsLocation.City.cityName</span>
                                                        }
                                                    }
                                                    @*<span data-bind="with:cityName"><b>From:</b></span>
                                                        <span data-bind="if:popularPlace">
                                                            <span data-bind="text:popularPlace"></span>,
                                                        </span>
                                                        <span data-bind="text:cityName"></span>*@
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>


                    }
                    </text>
                    }
                    else
                    {<text>No results found. Please try something else</text>}
                    <!-- pager -->
                    @if (Model.Pager.EndPage > 1)
                    {
                        <br />
                        <ul class="pagination">
                            @if (Model.Pager.CurrentPage > 1)
                            {
                                <li>
                                    @Html.ActionLink("First page", "Bikes", new { mobileAccessories = mobileAccessories, brand = brand, model = q_model, minPrice = minPrice, maxPrice = maxPrice, tags = tags })
                                    @*<a href="~/MobilesTablets?mobileAccessories">First Page</a>*@
                                </li>
                                <li>
                                    @Html.ActionLink("Previous", "Bikes", new { mobileAccessories = mobileAccessories, brand = brand, model = q_model, minPrice = minPrice, maxPrice = maxPrice, tags = tags, page = Model.Pager.CurrentPage - 1 })
                                    @*<a href="~/Home/Index?page=@(Model.Pager.CurrentPage - 1)">Previous</a>*@
                                </li>
                            }

                            @for (var page = Model.Pager.StartPage; page <= Model.Pager.EndPage; page++)
                            {
                                <li class="@(page == Model.Pager.CurrentPage ? "active" : "")">
                                    @Html.ActionLink(page.ToString(), "Bikes", new { mobileAccessories = mobileAccessories, brand = brand, model = q_model, minPrice = minPrice, maxPrice = maxPrice, tags = tags, page = page })
                                    @*<a href="~/Home/Index?page=@page">@page</a>*@
                                </li>
                            }

                            @if (Model.Pager.CurrentPage < Model.Pager.TotalPages)
                            {
                                <li>
                                    @Html.ActionLink("Next", "Bikes", new { mobileAccessories = mobileAccessories, brand = brand, model = q_model, minPrice = minPrice, maxPrice = maxPrice, tags = tags, page = Model.Pager.CurrentPage + 1 })
                                </li>
                                @*<li>
                                    @Html.ActionLink("Last", "Bikes", new { mobileAccessories = mobileAccessories, brand = brand, model = q_model, minPrice = minPrice, maxPrice = maxPrice, tags = tags, page = Model.Pager.TotalPages })
                                </li>*@
                            }
                        </ul>
                        <br /><br />
                    }
                    <br /><br />
                    <div class="visible-xs">

                        @*<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
                        <ins class="adsbygoogle"
                             style="display:block"
                             data-ad-client="ca-pub-3540353581324370"
                             data-ad-slot="3103703247"
                             data-ad-format="auto"></ins>
                        <script>
(adsbygoogle = window.adsbygoogle || []).push({});
                        </script>*@
                    </div>
                    <br /><br />
                </div>
            </div>
        </div>
        @*<div class="col-lg-3"></div>*@
    </div>
</div>
<style>
    .example .pagination > li > a,
    .example .pagination > li > span {
        border: 1px solid #1ab394;
    }

    .pagination > li.active > a {
        background: #1ab394;
        color: #fff;
    }

    .carouselContainer {
        overflow: hidden;
        //height:350px;
        margin: 0px;
        padding: 0px;
    }

    #gallery {
        margin: 0px;
        padding: 0px;
    }

    .product-imitation {
        margin: 0px;
        padding: 0px;
        width: 250px ;
        height: 250px;
        /apply max-padding or default image;
    }

    .carouselContainer img {
        // height: 350px;
        width: 250px ;
        height: 250px;
    }

    .showAds .ibox {
        height: 420px;
    }

    .product-price {
        top: 0px;
    }
</style>
@section Styles {
    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/bundles/tagStyles")
}
@section Scripts{
    @Scripts.Render("~/plugins/toastr")
    @Scripts.Render("~/plugins/timeago")
    @Scripts.Render("~/plugins/autosize")
    @Scripts.Render("~/plugins/knockout")
    <script src="~/Scripts/app/CreateAlert.js"></script>
    <script src="~/Scripts/app/_Truncate-knockout-binding.js"></script>
    <script src="~/Scripts/app/GetLoginUserId.js"></script>
    <script>
        function viewModel() {

            SearchingLocation();
            AccountViewModel();
            ChatViewModel();
            CreateAlert();
            var self = this;
            loadBrands();
            self.showAds = ko.observableArray();
            self.showCompanies = ko.observableArray();

            return self;
        }
        //start of mobileTree.js
        function Model(data) {
            var self = this;
            data = data || {};
            self.modelName = data.model;
        }
        function Company(data) {
            var self = this;
            data = data || {};
            self.companyName = data.companyName;
            self.showModels = ko.observableArray();
            if (data.models) {
                var models = $.map(data.models, function (item) { return new Model(item) });
                self.showModels(models);
            }
        }
        var availableBrands = ko.observableArray();
        var selectedBrand = ko.observable();
        var sub = selectedBrand.subscribe(function (value) {
            loadModels();
        })
        loadBrands = function () {
            $.ajax({
                url: '/api/Vehicle/GetBikeBrands',
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: 'GET',
                success: function (data) {
                    $.each((data), function (i, item) { availableBrands.push(item) });
                    if (q_brand != "" && q_brand != null && q_brand != undefined) {
                        selectedBrand(q_brand);
                    }

                    $("#from-price").selectize({
                        create:true,
                    });
                    $("#to-price").selectize({
                        create: true,
                    });
                    $('#select-brand').selectize();
                    $("#to-price").selectize({
                        create: true,
                    });
                    selectedMinPrice = $("#q-minPrice").text() || 0;
                    if (selectedMinPrice) {
                        selectedMinPrice = selectedMinPrice.split(',')[0];
                    }
                    selectedMaxPrice = $("#q-maxPrice").text() || 0;
                    if (selectedMaxPrice) {
                        selectedMaxPrice = selectedMaxPrice.split(',')[0];
                    }
                    $("#from-price").selectize({
                        create: true,
                    });
                    if (selectedMinPrice != 0) {
                        if ($.inArray(selectedMinPrice, availableMinPrices) == -1) {
                            var minPrice_selectize = $("#from-price")[0].selectize;
                            minPrice_selectize.addOption({
                                text: selectedMinPrice,
                                value: selectedMinPrice
                            });
                            minPrice_selectize.addItem(selectedMinPrice);
                        }
                    }
                    if (selectedMaxPrice != 0) {
                        if ($.inArray(selectedMaxPrice, availableMaxPrices) == -1) {
                            var maxPrice_selectize = $("#to-price")[0].selectize;
                            maxPrice_selectize.addOption({
                                text: selectedMaxPrice,
                                value: selectedMaxPrice
                            });
                            maxPrice_selectize.addItem(selectedMaxPrice);
                        }
                    }
                },
                error: function (jqXHR, status, thrownError) {
                    toastr.error("failed to load Brands.Please refresh page and try again", "Error");
                }
            });
        }
        var availableModels = ko.observableArray();
        var selectedModel = ko.observable();
        var loadModels = function () {
            availableModels.removeAll();
            $.ajax({
                url: '/api/Vehicle/GetBikeModels?brand=' + selectedBrand(),
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: 'GET',
                success: function (data) {
                    $.each((data), function (i, item) { availableModels.push(item) });
                    if (q_model != "" && q_model != null && q_model != undefined) {
                        selectedModel( q_model);
                    }
                    $('#select-model').selectize();
                },
                error: function (jqXHR, status, thrownError) {
                    toastr.error("failed to load Models.Please refresh page and try again", "Error");
                }
            });
        }

        $('#select-tag').selectize({
            valueField: 'name',
            labelField: 'name',
            searchField: 'name',
            options: [],
            maxItems: 4,
            render: {
                option: function (item, escape) {
                    return '<div>' +
                        '<span class="title">' +
                            '<span class="name">' + escape(item.name) + '</span>' +

                        '</span>' +
                        '<span class="description">' + escape(item.info) + '</span>' +
                        '<ul class="meta">' +
                            '<li class="watchers"><span>' + escape(item.followers) + '</span> followers</li>' +
                            '<li class="forks"><span>' + escape(item.questions) + '</span> times used</li>' +
                        '</ul>' +
                    '</div>';
                }
            },
            load: function (query, callback) {
                if (!query.length) return callback();
                $.ajax({
                    url: '/api/Tag/SearchTags?s=' + encodeURIComponent(query),
                    type: 'GET',
                    error: function () {
                        callback();
                    },
                    success: function (res) {
                        callback(res.slice(0, 10));
                    }
                });
            }
        });

        var availableMinPrices = ["5000", "10000", "25000", "50000", "70000", "100000", "500000", "1000000"];
        var selectedMinPrice = null;
        var availableMaxPrices = ["5000", "10000", "25000", "50000", "70000", "100000", "500000", "1000000"];
        var selectedMaxPrice = null;

        selectedMinPrice = $("#q-minPrice").text() || 0;
        if (selectedMinPrice) {
            selectedMinPrice = selectedMinPrice.split(',')[0];
        }
        selectedMaxPrice = $("#q-maxPrice").text() || 0;
        if (selectedMaxPrice) {
            selectedMaxPrice = selectedMaxPrice.split(',')[0];
        }
        var mobileAccessories = ko.observable(false);
        var brand = ko.observable("");
        var model = ko.observable("");
        var title = ko.observable($("#search").val());
       // var tags = ko.observable("");
        //var minPrice = ko.observable(0);
        //var maxPrice = ko.observable(50000);
        //end of mobiletree.js

        var resetFilters = function () {
            var selectize_brand1 = $("#select-brand")[0].selectize;
            selectize_brand1.clear();
            var selectize_tags1 = $("#select-tag")[0].selectize;
            selectize_tags1.clear();
            var selectize_min = $("#from-price")[0].selectize;
            selectize_min.clear();
            var selectize_max = $("#to-price")[0].selectize;
            selectize_max.clear();
            minPrice = 0;
            maxPrice = 50000;
            mobileAccessories(false);


        }

        //start assigning values
        var q_brand = $("#q-brand").text();
        var q_model = $("#q-model").text();
        var condition = $("#condition").text();
        var q_mobileAccessories = $("#mobileAccessories").text();
        if (q_mobileAccessories) {
            mobileAccessories(true);
        }
        //if (q_brand != "" && q_brand != null && q_brand != undefined) {
        //    selectedBrand(q_brand);
        //    if (q_model != "" && q_model != null && q_model != undefined) {
        //        selectedModel ( q_model);
        //    }
        //}

        var q_tags = $("#q-tags").text();
        var tags = ko.observable(q_tags);
        //set values in selectize


        var selectize_tags = $("#select-tag")[0].selectize;
        if (q_tags != "" && q_tags != null) {
            var q_tags_array = q_tags.split(',');
            var selectedTags = [];
            $.each((q_tags_array), function (i, item) { selectedTags.push(item) });
            $.each((selectedTags), function (i, item) {
                selectize_tags.addOption({
                    text: item,
                    value: item,
                    name: item,
                });
                selectize_tags.addItem(item);
            });
        }
        var saveResult = function (data) {
            if (data == null || data == undefined) {
                $("#fromNumber").val(minPrice);
                $("#toNumber").val(maxPrice);
            }
            else {
                $("#fromNumber").val(data.fromNumber);
                $("#toNumber").val(data.toNumber);
            }
        };
      //  selectedMinPrice = $("#q-minPrice").text() || 0;
        var maxPrice = $("#q-maxPrice").text() || 50000;
        //end assigning values



        function getTimeAgo(varDate) {
            if (varDate) {
                return $.timeago(varDate.toString().slice(-1) == 'Z' ? varDate : varDate + 'Z');
            }
            else {
                return '';
            }
        }
        ko.bindingHandlers.jqAutoresize = {
            init: function (element, valueAccessor, aBA, vm) {
                if (!$(element).hasClass('msgTextArea')) {
                    $(element).css('height', '1em');
                }
                $(element).autosize();
            }
        };


        $(function () {
            $('.ladda-button').ladda('bind', { timeout: 200000 });
            toastr.options = {
                closeButton: true,
                progressBar: true,
                preventDuplicates: true,
                positionClass: 'toast-top-right',
                onclick: null
            };
            ko.applyBindings(new viewModel);
            var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
            var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            if (w < 786) {
                $('.collapse-link').click();
                $(".product-desc").css({ "padding": "0px" });
                $(".product-price").css({ "color": "green", "background": "none" });
            }
        });

    </script>
}





