@model Inspinia_MVC5_SeedProject.Models.Ad

@{
    ViewBag.Title = "Create MotorCycle or Scooter Ad";
}




<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-md-6">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <a class="btn btn-info btn-xs pull-right " href="/CreateAd">Post ad in another category</a>
                    <h5>Create MotorCycle/Scooter Ad</h5>
                </div>
                <div class="ibox-content">
                    @Html.Partial("~/Views/Shared/_Dropzone.cshtml")
                    @using (Html.BeginForm("CreateBikeAd", "Vehicles", FormMethod.Post, new { id = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="files" id="fileNames" />
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true)
                            <div class="form-group">
                                <label class="control-label col-md-2">Select Brand <span class="req">*</span> </label>
                                <div class="col-md-10">
                                    <select id="select-brand" required class="demo-default" name="brand" data-bind="options: availableBrands,
                       value: selectedBrand,
                       optionsCaption: 'Choose brand...'"></select>
                                </div>
                            </div>
                            <div data-bind="with:selectedBrand">
                                <div class="form-group">
                                    <label class="control-label col-md-2">Select Model <span class="req">*</span> </label>
                                    <div class="col-md-10">
                                        <select id="select-model" required class="demo-default" name="model" data-bind="options: $parent.availableModels,
                       value: $parent.selectedModel,
                       optionsCaption: 'Choose model...'"></select>
                                    </div>
                                </div>
                            </div>



                            <div class="form-group">
                                <label class="control-label col-md-2">Year </label>
                                <div class="col-md-10">
                                    <select id="select-year" class="demo-default" name="year" data-bind="options: availableYears,
                        value: selectedYear,
                       optionsCaption: 'Choose year...'"></select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">KM Driven</label>
                                <div class="col-md-10">
                                    <div class="input-group m-b">
                                        <input type="number" class="form-control" name="kmDriven" /><span class="input-group-addon">Km</span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">Number of owners</label>
                                <div class="col-md-10">
                                    <select id="select-noOfOwners" name="noOfOwners" placeholder="choose number of owners">
                                        <option value="">Choose number of owners</option>
                                        <option value="1">1</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">Registered City</label>
                                <div class="col-md-10">
                                    <select id="select-registeredCity" class="demo-default" name="registeredCity" data-bind="options: availableCities,
                       value: selectedRegisteredCity,
                       optionsCaption: 'Choose register city...'"></select>
                                </div>
                            </div>
                            
                            @Html.Partial("~/Views/Shared/_CreateAd_Most.cshtml")

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <button type="submit" data-bind="click:submitClicked" class="btn btn-primary">Submit</button>
                                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-white" })
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>




@section Styles {

    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/Scripts/plugins/jquery-ui/jqueryuiStyles")
    @Styles.Render("~/bundles/myStyles")
    @Styles.Render("~/bundles/tagStyles")
    @Styles.Render("~/Content/plugins/dropzone/dropZoneStyles")
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/plugins/autosize")
    @Scripts.Render("~/plugins/dropZone")
    <script src="~/Scripts/app/dropzone-knockout-binding.js"> </script>
    <script src="~/Scripts/app/_CreateAd.js"></script>
    <script type="text/javascript">
        var fileList = new Array;
        function ViewModel() {
            SearchingLocation();
            AccountViewModel();
            ChatViewModel();
            var self = this;
            self.submitClicked = function () {
                console.log(fileList);
                $("input[id*='fileNames']").val(JSON.stringify(fileList));
                window.btn_clicked = true;
                $("#form").submit();
            }

            UserCompanies_CreateAd(self);

            self.availableYears = ko.observableArray();
            self.loadYears = function () {
                var firstYear = 1960;
                var currentYear = new Date().getFullYear();
                for (var x = firstYear; x <= currentYear; x++) {
                    self.availableYears.push(x);
                }
            }
            self.loadYears();
            self.selectedYear = ko.observable();

            self.selectedRegisteredCity = ko.observable();

            self.conditionChecked = ko.observable(false);
            self.typeValue = ko.observable();
            self.selectedVal = ko.observable();
            self.selectedVal.subscribe(function (val) {
                if (val == "fixedPrice") {
                    self.isAllowBidingChecked(false);
                    self.isFixPriceChecked(true);
                }
                else {
                    self.isAllowBidingChecked(true);
                    self.isFixPriceChecked(false);
                }
            });
            self.availableBrands = ko.observableArray();
            self.selectedBrand = ko.observable();
            self.selectedModel = ko.observable();
            var sub = self.selectedBrand.subscribe(function (value) {
                self.loadModels();
            })
            self.isAllowBidingChecked = ko.observable(false);
            self.isFixPriceChecked = ko.observable(false);

            self.loadBrands = function () {
                $.ajax({
                    url: '/api/Vehicle/GetBikeBrands',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableBrands.push(item) });
                        $('#select-brand').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 29,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                        $('#select-year').selectize();
                        $('#select-noOfOwners').selectize();
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Brands.Please refresh page and try again", "Error");
                    }
                });
            }
            self.availableModels = ko.observableArray();
            self.selectedModel = ko.observable();
            self.loadModels = function () {
                self.availableModels.removeAll();
                $.ajax({
                    url: '/api/Vehicle/GetBikeModels?brand=' + self.selectedBrand(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableModels.push(item) });
                        $('#select-model').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 29,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Models.Please refresh page and try again", "Error");
                    }
                });
            }
            self.loadBrands();

            //location
            self.availableCities = ko.observableArray();
            self.selectedCity = ko.observable();
            self.availablePopularPlaces = ko.observableArray();
            self.selectedPopularPlace = ko.observable();
            self.loadCities = function () {
                $.ajax({
                    url: '/api/Location/GetCities',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableCities.push(item) });
                        $('#select-city').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 39,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                        $('#select-registeredCity').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 39,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Cities.Please refresh page and try again", "Error");
                    }
                });
            }
            self.loadPopularPlaces = function () {
                self.availablePopularPlaces.removeAll();
                $.ajax({
                    url: '/api/Location/GetPopularPlaces?city=' + self.selectedCity(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availablePopularPlaces.push(item) });
                        $('#select-popularPlace').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 49,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Famous Places.Please refresh page and try again", "Error");
                    }
                });
            }
            self.loadCities();
            var sub = self.selectedCity.subscribe(function (value) {
                self.loadPopularPlaces();
            })
        }
        ko.bindingHandlers.jqAutoresize = {
            init: function (element, valueAccessor, aBA, vm) {
                if (!$(element).hasClass('msgTextArea')) {
                    $(element).css('height', '1em');
                }
                $(element).autosize();
            }
        };

        ko.bindingHandlers.iCheck = { // integrating icheck plugin using bh
            init: function (element, valueAccessor) {
                //initialize icheck to the element
                $(element).iCheck({
                    radioClass: 'iradio_square-green'
                });
                $(element).on('ifChecked', function (event) {
                    var observable = valueAccessor();
                    observable.checked(event.target.defaultValue); //assigning selected value
                });
            }
        };

        $(document).ready(function () {
            ko.applyBindings(new ViewModel);
            window.onbeforeunload = function (e) {
                if (!window.btn_clicked) {
                    e = e || window.event;
                    if (e) {
                        e.returnValue = 'Sure?';
                    }
                    return 'Sure?';
                }
            };
            Selectize.define('inputMaxlength', function (options) {
                var self = this;
                this.setup = (function () {
                    var original = self.setup;
                    return function () {
                        original.apply(this, arguments);
                        this.$control_input.attr('maxlength', this.settings.inputMaxlength);
                    };
                })();
            });
            $('#select-tag').selectize({
                valueField: 'name',
                labelField: 'name',
                searchField: 'name',
                options: [],
                maxItems: 4,
                create: true,
                render: {
                    option: function (item, escape) {
                        return '<div>' +
                            '<span class="title">' +
                                '<span class="name">' + escape(item.name) + '</span>' +

                            '</span>' +
                            '<span class="description">' + escape(item.info) + '</span>' +
                            '<ul class="meta">' +
                                '<li class="watchers"><span>' + escape(item.followers) + '</span> followers</li>' +
                                '<li class="forks"><span>' + escape(item.questions) + '</span> times used</li>' +
                            '</ul>' +
                        '</div>';
                    }
                },
                load: function (query, callback) {
                    if (!query.length) return callback();
                    $.ajax({
                        url: '/api/Tag/SearchTags?s=' + encodeURIComponent(query),
                        type: 'POST',
                        error: function () {
                            callback();
                        },
                        success: function (res) {
                            callback(res.slice(0, 10));
                        }
                    });
                }
            });
            $("#form").validate({
                ignore: '.ignoreit, :hidden:not([class~=selectized]),:hidden > .selectized, .selectize-control .selectize-input input ',
                rules: {
                    title: {
                        required: true,
                        maxlength: 50,
                        minlength: 15
                    },
                    company: {
                        required: true,
                        maxlength: 15
                    },
                    model: {
                        required: true,
                        maxlength: 20
                    },
                    description: {
                        required: true,
                        minlength: 25,
                        maxlength: 1000
                    },
                    color: {
                        required: true,
                        maxlength: 20
                    },
                    price: {
                        number: true
                    },
                    abc: {
                        required: true
                    }
                }
            });
            $('.i-check').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });

        });
    </script>
}












