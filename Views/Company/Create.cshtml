@model Inspinia_MVC5_SeedProject.Models.Company

@{
    ViewBag.Title = "Create Business Page";
}



<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-md-6">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Create Business Page</h5>
                </div>
                <div class="ibox-content">

                    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="files" id="fileNames" />
                        <div class="form-horizontal">
                            <br />
                            <div class="form-group">
                                <label class="control-label col-md-2">Choose category <span class="req">*</span></label>
                                <div class="col-md-10">
                                    <select id="select-category" required class="demo-default" name="category" data-bind="options: availableCategories,
                       value: selectedCategory,
                       optionsCaption: 'which category best describe your business'"></select>
                                    @*<p class="help-block">Choose category in whi</p>*@
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">Title <span class="req">*</span></label>
                                <div class="col-md-10">
                                    <input type="text" class="form-control" required name="title" placeholder="company name" value="@Model.title" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-md-2">One line description <span class="req">*</span></label>
                                <div class="col-md-10">
                                    <input type="text" class="form-control" required name="shortabout" value="@Model.shortabout" />
                                    <p>Just one line description. You can enter detials later</p>
                                </div>
                            </div>


                            <div class="row">
                                <div class="control-group">
                                    <label class="control-label col-md-2" for="select-repo">Tags <br /><small class="text-navy">optional</small></label>
                                    <div class="col-md-10">
                                        <input id="select-tag" name="tags" class="repositories" placeholder="Pick tags..." />
                                    </div>
                                </div>
                            </div>


                        </div>
                        <br />
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <button type="submit" data-bind="click:submitClicked"  data-style="expand-left" class="ladda-button btn btn-primary">Submit</button>
                                @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-white" })
                            </div>
                        </div>
                        <br /><br />


                    }

                </div>
            </div>
        </div>
        @*<div class="col-sm-6">
                The fields with <span class="req">*</span> are mendatory
            </div>*@
    </div>
</div>



@section Styles {

    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/Scripts/plugins/jquery-ui/jqueryuiStyles")
    @Styles.Render("~/bundles/myStyles")
    @Styles.Render("~/bundles/tagStyles")
    @Styles.Render("~/Content/plugins/dropzone/dropZoneStyles")
}

@section Scripts {
    @*<script src="~/Scripts/app/dropzone-knockout-binding.js"> </script>*@
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/plugins/autosize")
    @Scripts.Render("~/plugins/dropZone")
    <script type="text/javascript">
        var fileList = new Array;
        function ViewModel() {
            var self = this;

            SearchingLocation();
            AccountViewModel();
            ChatViewModel();

            self.selectedCategory = ko.observable();
            self.availableCategories = ["Mobiles", "Electronics", "Jobs", "Vehicles", "Real estate","Services","Pets & Animals","Books-Sports-Hobbies"];

            self.submitClicked = function () {
                $("input[id*='fileNames']").val(JSON.stringify(fileList));
                window.btn_clicked = true;
                $("#form").submit();
                if ($("#form").valid()) {
                    var savingBidLoader = $('.ladda-button').ladda();
                    savingBidLoader.ladda('start');
                } else {
                    toastr.info("Fields with * are mandatory!");
                }
            }
            self.conditionChecked = ko.observable(false);
            self.typeValue = ko.observable();
            self.selectedVal = ko.observable();
            self.selectedVal.subscribe(function (val) {
                if (val == "fixedPrice") {
                    self.isAllowBidingChecked(false);
                    self.isFixPriceChecked(true);
                }
                else {
                    self.isAllowBidingChecked(true);
                    self.isFixPriceChecked(false);
                }
            });
            self.availableBrands = ko.observableArray();
            self.selectedBrand = ko.observable();
            self.selectedModel = ko.observable();
            var sub = self.selectedBrand.subscribe(function (value) {
                self.loadModels();
            })
            self.isAllowBidingChecked = ko.observable(false);
            self.isFixPriceChecked = ko.observable(false);

            self.loadBrands = function () {
                $.ajax({
                    url: '/api/Electronic/GetBrands',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableBrands.push(item) });
                        $('#select-brand').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 29,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },

                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Brands.Please refresh page and try again", "Error");
                    }
                });
            }
            self.availableModels = ko.observableArray();
            self.selectedModel = ko.observable();
            self.loadModels = function () {
                self.availableModels.removeAll();
                $.ajax({
                    url: '/api/Electronic/GetModels?brand=' + self.selectedBrand(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableModels.push(item) });
                        $('#select-model').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 29,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Models.Please refresh page and try again", "Error");
                    }
                });
            }
            self.loadBrands();

            //location
            self.availableCities = ko.observableArray();
            self.selectedCity = ko.observable();
            self.availablePopularPlaces = ko.observableArray();
            self.selectedPopularPlace = ko.observable();
            self.loadCities = function () {
                $.ajax({
                    url: '/api/Location/GetCities',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableCities.push(item) });
                        $('#select-city').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 39,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },

                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Cities.Please refresh page and try again", "Error");
                    }
                });
            }
            self.loadPopularPlaces = function () {
                self.availablePopularPlaces.removeAll();
                $.ajax({
                    url: '/api/Location/GetPopularPlaces?city=' + self.selectedCity(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availablePopularPlaces.push(item) });
                        $('#select-popularPlace').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 49,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Famous Places.Please refresh page and try again", "Error");
                    }
                });
            }
            self.loadCities();
            var sub = self.selectedCity.subscribe(function (value) {
                self.loadPopularPlaces();
            })
        }
        ko.bindingHandlers.jqAutoresize = {
            init: function (element, valueAccessor, aBA, vm) {
                if (!$(element).hasClass('msgTextArea')) {
                    $(element).css('height', '1em');
                }
                $(element).autosize();
            }
        };
        ko.bindingHandlers.dropzone = {
            init: function (element, valueAccessor) {
                var value = ko.unwrap(valueAccessor());

                var options = {
                    maxFileSize: 15,
                    uploadMultiple: true,
                    parallelUploads: 100,
                    maxFiles: 30,
                    addRemoveLinks: true,
                    acceptedFiles: ".jpeg,.jpg,.png,.gif",
                    init: function () {
                        var myDropzone = this;
                        this.on("success", function (file, serverFileName) {
                            fileList = [];
                            i = 1;
                            console.log(serverFileName);
                            var abc = $.map(serverFileName, function (item) { return (item); });
                            $.each(abc, function (index, value) {
                                fileList[i] = { "fileName": value, "fileId": i++ };
                            })
                            console.log(fileList);
                        });
                    }
                };

                $.extend(options, value);

                $(element).addClass('dropzone');
                new Dropzone(element, options); // jshint ignore:line
            }
        };
        ko.bindingHandlers.icheck = { // integrating icheck plugin using bh
            init: function (element, valueAccessor) {
                //initialize icheck to the element
                $(element).icheck({
                    radioClass: 'iradio_square-green'
                });
                $(element).on('ifChecked', function (event) {
                    var observable = valueAccessor();
                    observable.checked(event.target.defaultValue); //assigning selected value
                });
            }
        };

        $(document).ready(function () {
            ko.applyBindings(new ViewModel);
            window.onbeforeunload = function (e) {
                if (!window.btn_clicked) {
                    e = e || window.event;
                    if (e) {
                        e.returnValue = 'Sure?';
                    }
                    return 'Sure?';
                }
            };
            Selectize.define('inputMaxlength', function (options) {
                var self = this;
                this.setup = (function () {
                    var original = self.setup;
                    return function () {
                        original.apply(this, arguments);
                        this.$control_input.attr('maxlength', this.settings.inputMaxlength);
                    };
                })();
            });
            $('#select-category').selectize({
               // create: true,
               // plugins: ['inputMaxlength'],
              //  inputMaxlength: 29,
                sortField: {
                    field: 'text',
                    direction: 'asc'
                },
            });
            $('#select-tag').selectize({
                valueField: 'name',
                labelField: 'name',
                searchField: 'name',
                options: [],
                maxItems: 6,
                create: true,
                render: {
                    option: function (item, escape) {
                        return '<div>' +
                            '<span class="title">' +
                                '<span class="name">' + escape(item.name) + '</span>' +

                            '</span>' +
                            '<span class="description">' + escape(item.info) + '</span>' +
                            '<ul class="meta">' +
                                '<li class="watchers"><span>' + escape(item.followers) + '</span> followers</li>' +
                                '<li class="forks"><span>' + escape(item.questions) + '</span> times used</li>' +
                            '</ul>' +
                        '</div>';
                    }
                },
                load: function (query, callback) {
                    if (!query.length) return callback();
                    $.ajax({
                        url: '/api/Tag/SearchTags?s=' + encodeURIComponent(query),
                        type: 'GET',
                        error: function () {
                            callback();
                        },
                        success: function (res) {
                            callback(res.slice(0, 10));
                        }
                    });
                }
            });
            $('#select-color').selectize({
                create: true,
                plugins: ['inputMaxlength'],
                inputMaxlength: 19,
                sortField: {
                    field: 'text',
                    direction: 'asc'
                },
            });
            $('#select-sims').selectize({
                sortField: {
                    field: 'text',
                    direction: 'asc'
                },
            });
            $("#form").validate({
                ignore: '.ignoreit, :hidden:not([class~=selectized]),:hidden > .selectized, .selectize-control .selectize-input input ',
                rules: {
                    shortabout: {
                        required: true,
                        minlength: 20,
                        maxlength: 60
                    },
                    title: {
                        required: true,
                        maxlength: 50,
                        minlength: 10
                    },
                    company: {
                        required: true,
                        maxlength: 15
                    },
                    
                    
                }
            });
            $('.i-check').icheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });

        });
    </script>
}

