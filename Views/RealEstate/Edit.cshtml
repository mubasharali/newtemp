@model Inspinia_MVC5_SeedProject.Models.Ad
@using Inspinia_MVC5_SeedProject.CodeTemplates;
@{

    ViewBag.Title = "Edit Real Estate Ad";
}
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-md-6">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Edit Real Estate Ad</h5>
                </div>
                <div class="ibox-content">
                    @Html.Partial("~/Views/Shared/_Dropzone.cshtml")
                    @using (Html.BeginForm("Edit", "RealEstate", FormMethod.Post, new { id = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="files" id="fileNames" />

                        <div class="form-horizontal">
                            @Html.ValidationSummary(true)
                            <div class="form-group">
                                <label class="control-label col-md-2">Select category<span class="req">*</span></label>
                                <div class="col-md-10">
                                    <select id="select-category" required class="demo-default" name="subcategory" data-bind="options: availableCategories,
                       value: selectedCategory,
                       optionsCaption: 'Choose category...'"></select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">Select Floors</label>
                                <div class="col-md-10">
                                    <select id="select-floor" class="demo-default" name="floor" data-bind="options: availableFloors,
                       value: selectedFloor,
                       optionsCaption: 'Choose Floors...'"></select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">Select Bed Rooms</label>
                                <div class="col-md-10">
                                    <select id="select-bedroom" class="demo-default" name="bedroom" data-bind="options: availablebedroom,
                       value: selectedbedroom,
                       optionsCaption: 'Choose bed rooms...'"></select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">Select bathroom</label>
                                <div class="col-md-10">
                                    <select id="select-bathroom" class="demo-default" name="bathroom" data-bind="options: availablebathrooms,
                       value: selectedbathroom,
                       optionsCaption: 'Choose bathroom...'"></select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">Area</label>
                                <div class="col-md-10">
                                    <div class="input-group m-b">
                                        <input type="number" id="area" class="form-control" pattern="[0-9]*" name="area" /><span class="input-group-addon">ft<sup>2</sup> </span>
                                    </div>
                                </div>
                            </div>

                            @Html.Partial("~/Views/Shared/_EditAd_RealEstate.cshtml")

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" data-bind="click:submitClicked" value="Update"  data-style="expand-left" class="ladda-button btn btn-primary" />
                                    @Html.ActionLink("Cancel", "Details", "Electronics", new { id = Model.Id, title = ElectronicsController.URLFriendly(Model.title) }, new { @class = "btn btn-white" })
                                    @*<a href="/Details/@Model.Id/@ElectronicsController.URLFriendly(@Model.title) " class="btn btn-white">Cancel</a>*@
                                </div>
                            </div>

                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>



@section Styles {

    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/Scripts/plugins/jquery-ui/jqueryuiStyles")
    @Styles.Render("~/Content/plugins/dropzone/dropZoneStyles")
    @Styles.Render("~/bundles/tagStyles")
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/plugins/toastr")
    @Scripts.Render("~/plugins/autosize")
    @Scripts.Render("~/plugins/dropZone")
<script src="~/Scripts/app/dropzone-knockout-binding-edit.js"></script>
    <script src="~/Scripts/app/_CreateAd.js"></script>
    <script type="text/javascript">

        function ViewModel() {
            SearchingLocation();
            AccountViewModel();
            ChatViewModel();
            var self = this;
            UserCompanies_CreateAd(self);
            self.submitClicked = function () {
                if (isFilesUploading) {toastr.info("Please wait until images are uploaded");return;}$("input[id*='fileNames']").val(JSON.stringify(fileList));
                window.btn_clicked = true;
                $("#form").submit();
                if ($("#form").valid()) {
                    var savingBidLoader = $('.ladda-button').ladda();
                    savingBidLoader.ladda('start');
                } else {
                    toastr.info("Fields with * are mandatory!");
                }
            }
            self.conditionChecked = ko.observable(false);
            self.typeValue = ko.observable("sell");
            self.selectedVal = ko.observable();
            self.selectedVal.subscribe(function (val) {
                if (val == "fixedPrice") {
                    self.isAllowBidingChecked(false);
                    self.isFixPriceChecked(true);
                }
                else {
                    self.isAllowBidingChecked(true);
                    self.isFixPriceChecked(false);
                }
            });
            self.availableCities = ko.observableArray();
            self.selectedCity = ko.observable();
            self.availablePopularPlaces = ko.observableArray();
            self.selectedPopularPlace = ko.observable();
            self.selectedBrandOriginal = "";
            self.selectedModelOriginal = "";
            self.selectedCityOriginal = "";
            self.selectedPopularPlaceOriginal = "";
            self.exectLocation = "";
            self.selectedTags = [];
            self.isAllowBidingChecked = ko.observable(false);
            self.isFixPriceChecked = ko.observable(false);

            self.availableFloors = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"];
            self.selectedFloor = ko.observable();
            self.availablebedroom = ["1", "2", "3", "4", "5"];
            self.selectedbedroom = ko.observable();
            self.availablebathrooms = ["1", "2", "3", "4", "5"];
            self.selectedbathroom = ko.observable();
            self.selectedCategory = ko.observable();
            self.availableCategories = ["apartment", "house", "plot & land", "Shop", "Office", "PG & Flatmates", "other commerical places"]; //reference over HomeController/create page
         
            self.loadAd = function () {
                $.ajax({
                    url: '/api/Electronic/GetItem/' + $("#adId").val(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    //type: 'POST',
                    success: function (data) {


                        //for company
                        if (data.companyName) {
                            var comid = $("#" + data.companyName);
                            comid.icheck('checked');
                            self.postAdUsing(data.companyName);
                            $('.i-check').icheck({
                                checkboxClass: 'icheckbox_square-green',
                                radioClass: 'iradio_square-green',
                            });
                            // $("#Netsol Technologies Limited").icheck('checked');
                        } else {
                            $("#on").icheck('checked');
                            self.postAdUsing("on");
                        }

                        self.selectedbathroom(data.realestatead.bathroom);
                        self.selectedbedroom(data.realestatead.bedroom);
                        self.selectedFloor(data.realestatead.floor);
                        $("#area").val(data.realestatead.area);
                        self.selectedCategory(data.subCategory);

                        var tags = data.adTags;
                        $.each((tags), function (i, item) { self.selectedTags.push(item.name) });
                        self.exectLocation = data.location.exectLocation;
                        self.selectedCity(data.location.cityName);
                        self.selectedCityOriginal = data.location.cityName;
                        if (data.type == true) {
                            $("#sell").icheck('checked');
                        } else if (data.type == false) {
                            $("#buy").icheck('checked');
                        }
                        if (data.isNegotiable == 'b') {
                            self.selectedVal("fixedPrice");
                            $("#allowBiding").icheck('checked');
                        } else if (data.isNegotiable == 'n') {
                            $("#fixedPrice").icheck('checked');
                        } else if (data.isNegotiable == 'y') {
                            $("#fixedPrice").icheck('checked');
                            $("#isNegotiable").icheck('checked');
                        }
                        if (data.condition == 'u') {
                            $('#used').icheck('checked');
                            self.conditionChecked("used");

                        } else if (data.condition == 'b') {
                            $('#unboxed').icheck('checked');
                            self.conditionChecked("unboxed");
                        } else if (data.condition == 'n') {
                            $('#new').icheck('checked');
                            self.conditionChecked("new");

                        }
                        self.selectedPopularPlaceOriginal = data.location.popularPlace;


                        $("#select-category").selectize();
                        $("#select-floor").selectize();
                        $("#select-bedroom").selectize();
                        $("#select-bathroom").selectize();
                        $('#select-city').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 49,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                        $('#select-tag').selectize({
                            valueField: 'name',
                            labelField: 'name',
                            searchField: 'name',
                            maxItems: 6,
                            create: true,
                            render: {
                                option: function (item, escape) {
                                    return '<div>' +
                                        '<span class="title">' +
                                            '<span class="name">' + escape(item.name) + '</span>' +

                                        '</span>' +
                                        '<span class="description">' + escape(item.info) + '</span>' +
                                        '<ul class="meta">' +
                                            '<li class="watchers"><span>' + escape(item.followers) + '</span> followers</li>' +
                                            '<li class="forks"><span>' + escape(item.questions) + '</span> times used</li>' +
                                        '</ul>' +
                                    '</div>';
                                }
                            },
                            load: function (query, callback) {
                                if (!query.length) return callback();
                                $.ajax({
                                    url: '/api/Tag/SearchTags?s=' + encodeURIComponent(query),
                                    type: 'GET',
                                    error: function () {
                                        callback();
                                    },
                                    success: function (res) {
                                        callback(res.slice(0, 10));
                                    }
                                });
                            }
                        });
                        var selectize_tags = $("#select-tag")[0].selectize;
                        $.each((self.selectedTags), function (i, item) {
                            selectize_tags.addOption({
                                text: item,
                                value: item,
                                name: item,
                            });
                            selectize_tags.addItem(item);
                        });
                        
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load data. Please refresh page and try again", "Error");
                    }
                });
            }


            //location

            self.loadCities = function () {
                $.ajax({
                    url: '/api/Location/GetCities',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableCities.push(item) });
                        
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Cities.Please refresh page and try again", "Error");
                    }
                });
            }
            self.loadPopularPlaces = function () {
                self.availablePopularPlaces.removeAll();
                $.ajax({
                    url: '/api/Location/GetPopularPlaces?city=' + self.selectedCity(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availablePopularPlaces.push(item) });
                        
                        if (self.selectedCityOriginal == self.selectedCity()) {
                            self.selectedPopularPlace(self.selectedPopularPlaceOriginal);
                        }
                        $('#select-popularPlace').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 49,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Famous Places.Please refresh page and try again", "Error");
                    }
                });
            }

            var sub = self.selectedCity.subscribe(function (value) {
                self.loadPopularPlaces();
            })
            self.loadCities();

            self.loadAd();

        }
        ko.bindingHandlers.jqAutoresize = {
            init: function (element, valueAccessor, aBA, vm) {
                if (!$(element).hasClass('msgTextArea')) {
                    $(element).css('height', '1em');
                }
                $(element).autosize();
            }
        };
        ko.bindingHandlers.icheck = { // integrating icheck plugin using bh
            init: function (element, valueAccessor) {
                //initialize icheck to the element
                $(element).icheck({
                    radioClass: 'iradio_square-green'
                });
                $(element).on('ifChecked', function (event) {
                    var observable = valueAccessor();
                    observable.checked(event.target.defaultValue); //assigning selected value
                });
            }
        };


        var adId = $("#adId").val();
        function Images(data, i) {
            var self = this;
            data = data || {};
            self.name = adId + "_" + i + data.extension;
            self.size = data.size;
        }
        var images = [];
        var myDropzone1;
        var loadImages = function () {
            $.ajax({
                url: '/api/Electronic/getAdImages?id=' + adId,
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: 'GET',
                success: function (data) {
                    var i = 1;
                    var mappedads = $.map(data, function (item) { return new Images(item, i++); });
                    images = mappedads;

                    if (images) {
                        for (i = 0; i < images.length; i++) {
                            // images[i].name = $.trim(images[i].name);
                            myDropzone1.options.addedfile.call(myDropzone1, images[i]);
                            myDropzone1.options.thumbnail.call(myDropzone1, images[i], $.cookie("AWSURL") + $.cookie("AWSFolderName") + images[i].name);
                        }
                    }
                },
                error: function (jqXHR, status, thrownError) {
                    toastr.error("failed to load images.Please refresh page", "Error");
                }
            });
        }

        loadImages();
        var fileList = [];
       
        $(document).ready(function () {
            ko.applyBindings(new ViewModel);

            Selectize.define('inputMaxlength', function (options) {
                var self = this;
                this.setup = (function () {
                    var original = self.setup;
                    return function () {
                        original.apply(this, arguments);
                        this.$control_input.attr('maxlength', this.settings.inputMaxlength);
                    };
                })();
            });

            $("#form").validate({
                ignore: ':hidden:not([class~=selectized]),:hidden > .selectized, .selectize-control .selectize-input input',
                rules: {
                    title: {
                        required: true,
                        maxlength: 50,
                        minlength: 15
                    },
                    company: {
                        required: true,
                        maxlength: 15
                    },
                    model: {
                        required: true,
                        maxlength: 20
                    },
                    description: {
                        required: true,
                        minlength: 25,
                        maxlength: 1000
                    },
                    color: {
                        required: true,
                        maxlength: 20
                    },
                    price: {
                        number: true
                    },
                    abc: {
                        required: true
                    }
                }
            });
            $('.i-check').icheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });

        });
    </script>
}

