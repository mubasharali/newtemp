@model Inspinia_MVC5_SeedProject.Models.Ad

@{
    ViewBag.Title = "Post Job Ad";
}




<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-sm-6">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <a class="btn btn-info btn-xs pull-right " href="../CreateAd">Post ad in another category</a>
                    <h5>Create Job Ad</h5>
                </div>
                <div class="ibox-content">

				
@using (Html.BeginForm("Create", "Jobs", FormMethod.Post, new { id = "post" }))
{
    @Html.AntiForgeryToken()

    <div class="">
        @Html.ValidationSummary(true)
        <div class="">
            <p class="text-navy">Fields with <span class="req">*</span> are mendatory</p>

            <div class="form-group">
                <label>Job Category</label>
                <select id="select-category1" name="category" class="demo-default" data-bind="options: availableCategories,
                       value: selectedCategory,
                       optionsCaption: 'Select category...'"></select>
            </div>
            <div class="form-group">
                <label>Total seats </label>
                <input type="number" name="seats" class="form-control">
            </div>

            <div class="form-group">
                <label>Qualification </label>
                <input id="select-qualification" name="qualification" class="repositories" placeholder="e.g, BS Software Engineering" />
                @*<input type="text" name="qualification" placeholder="e.g, BS Software Engineering" class="form-control">*@
            </div>


            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label>Experience</label>
                        <div class="">

                            <div class="">
                                <select name="exprience" class="form-control" form="post">
                                    <option value="">
                                        Choose
                                    </option>
                                    <option value="n">
                                        Not required
                                    </option>
                                    <option value="f">
                                        Fresh graduate
                                    </option>
                                    <option value="1">
                                        1 year
                                    </option>
                                    <option value="2">
                                        2 year
                                    </option>
                                    <option value="3">
                                        3 year
                                    </option>
                                    <option value="4r">
                                        4 year
                                    </option>
                                    <option value="5">
                                        5 year
                                    </option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <div><label>Gender</label></div>
                        <select name="gender" class="form-control" form="post">
                            <option value="d">
                                Does not matter
                            </option>
                            <option value="m">
                                Male
                            </option>
                            <option value="f">
                                Female
                            </option>

                        </select>
                    </div>
                </div>
            </div>


            <div class="form-group">
                <label>Skills required</label>
                <input id="select-skills" name="skills" class="repositories" placeholder="what skills are required" />
            </div>
            <div>
                <label>Career Level</label>
            </div>
            <div class="form-group">
                <select name="careerLevel" class="form-control" form="post">
                    <option value="">
                        Choose
                    </option>
                    <option>Entry Level</option>
                    <option>Student/Internship</option>
                    <option>Mid Career</option>
                    <option>Management</option>
                    <option>Executive/Director</option>
                    <option>Senior Executive(President,CEO)</option>
                </select>
            </div>
            <div class="form-group">
                <label>Apply before  </label>
                <input type="date" name="lastDateToApply" class="form-control">
            </div>


            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <div><label>Job type</label></div>

                        <select name="subcategory" class="form-control" form="post">
                            <option value="">Choose</option>
                            <option>Full time</option>
                            <option>Permanent</option>
                            <option>Contract</option>
                            <option>Internship</option>
                            <option>Part time</option>
                        </select>

                    </div>
                </div>

                <div class="col-sm-6">
                    <div class="form-group">
                        <div><label>Shift timing</label></div>

                        <select name="shift" class="form-control" form="post">
                            <option value="m">Morning shift</option>
                            <option value="e">Evening shift</option>
                            <option value="n">Not confirmed</option>
                        </select>

                    </div>
                </div>
            </div>


            <div class="form-group">
                <label>salary </label>
                <div class="row">
                    <div class="col-sm-8">
                        <div class="input-group">
                            <input type="number" name="salary" class="form-control">
                            <span class="input-group-addon">Rs</span>
                        </div>
                    </div>
                    <div class="col-sm-3">

                        <select name="salaryType" class="form-control" form="post">
                            <option value="m">
                                per month
                            </option>
                            <option value="h">
                                per hour
                            </option>
                            <option value="d">
                                per day
                            </option>
                            <option value="y">
                                per year
                            </option>
                        </select>
                    </div>
                </div>
            </div>


            @Html.Partial("~/Views/Shared/_CreateAd_Jobs.cshtml")

            <br />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <button type="submit" data-bind="click:submitClicked" class="btn btn-primary">Submit</button>
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-white" })
                </div>
            </div>
            <br /><br /><br />
        </div>
    </div> 
}

    </div>
            </div>
        </div>
    </div>
 </div>

 
@section Styles {

    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/Scripts/plugins/jquery-ui/jqueryuiStyles")
    @Styles.Render("~/bundles/tagStyles")
    @Styles.Render("~/bundles/myStyles")
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/plugins/autosize")
<script src="~/Scripts/app/_CreateAd.js"></script>
<script type="text/javascript">

        function ViewModel() {
            SearchingLocation();
            AccountViewModel();
            ChatViewModel();
            var self = this;
            UserCompanies_CreateAd(self);
        self.submitClicked = function () {
           // console.log(fileList);
           // $("input[id*='fileNames']").val(JSON.stringify(fileList));
            window.btn_clicked = true;
            $("#post").submit();
        }
        
        self.availableCategories = ko.observableArray(new Array("Accountancy", "Administration", "Advertising", "Aerospace", "Apprenticeships", "Automotive", "Banking", "Call Center", "Catering", "Charity", "Construction", "Creative", "Customer Service", "Digital", "Education", "Engineering", "Finance", "FMCG", "Graduate", "HealthCare", "Hospitality", "HR", "Insurance", "IT", "Legal", "Leisure", "Logistics", "Management Consultancy", "Manufacturing", "Marketing", "Media", "Nursing", "Oil and Gas", "PA", "Pharmaceutical", "PR", "Property", "Public Sector", "Recruitment Sales", "Renewable Energy", "Retail", "Sales", "Science", "Secretarial", "Senior Appointments", "Social Work", "Teaching", "Telecoms", "Tourism", "Transport", "Travel", "Utilities", "Wholesale"));
        self.selectedCategory = ko.observable();
        self.typeValue = ko.observable("sell");
        self.conditionChecked = ko.observable(false);
        self.selectedVal = ko.observable();
        self.selectedVal.subscribe(function (val) {
            if (val == "fixedPrice") {
                self.isAllowBidingChecked(false);
                self.isFixPriceChecked(true);
            }
            else {
                self.isAllowBidingChecked(true);
                self.isFixPriceChecked(false);
            }
        });
        self.availableBrands = ko.observableArray();
        self.selectedBrand = ko.observable();
        self.selectedModel = ko.observable();
        var sub = self.selectedBrand.subscribe(function (value) {
            self.loadModels();
        })
        self.isAllowBidingChecked = ko.observable(false);
        self.isFixPriceChecked = ko.observable(false);

        
        

        //location
        self.availableCities = ko.observableArray();
        self.selectedCity = ko.observable();
        self.availablePopularPlaces = ko.observableArray();
        self.selectedPopularPlace = ko.observable();
        self.loadCities = function () {
            $.ajax({
                url: '/api/Location/GetCities',
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: 'GET',
                success: function (data) {
                    $.each((data), function (i, item) { self.availableCities.push(item) });
                    $('#select-city').selectize({
                        create: true,
                        plugins: ['inputMaxlength'],
                        inputMaxlength: 39,
                        sortField: {
                            field: 'text',
                            direction: 'asc'
                        },
                    });
                    $('#select-category1').selectize();
                },
                error: function (jqXHR, status, thrownError) {
                    toastr.error("failed to load Cities.Please refresh page and try again", "Error");
                }
            });
        }
        self.loadPopularPlaces = function () {
            self.availablePopularPlaces.removeAll();
            $.ajax({
                url: '/api/Location/GetPopularPlaces?city=' + self.selectedCity(),
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: 'GET',
                success: function (data) {
                    $.each((data), function (i, item) { self.availablePopularPlaces.push(item) });
                    $('#select-popularPlace').selectize({
                        create: true,
                        plugins: ['inputMaxlength'],
                        inputMaxlength: 49,
                        sortField: {
                            field: 'text',
                            direction: 'asc'
                        },
                    });
                },
                error: function (jqXHR, status, thrownError) {
                    toastr.error("failed to load Famous Places.Please refresh page and try again", "Error");
                }
            });
        }
        self.loadCities();
        var sub = self.selectedCity.subscribe(function (value) {
            self.loadPopularPlaces();
        })
    }
    ko.bindingHandlers.jqAutoresize = {
        init: function (element, valueAccessor, aBA, vm) {
            if (!$(element).hasClass('msgTextArea')) {
                $(element).css('height', '1em');
            }
            $(element).autosize();
        }
    };
    ko.bindingHandlers.iCheck = { // integrating icheck plugin using bh
        init: function (element, valueAccessor) {
            //initialize icheck to the element
            $(element).iCheck({
                radioClass: 'iradio_square-green'
            });
            $(element).on('ifChecked', function (event) {
                var observable = valueAccessor();
                observable.checked(event.target.defaultValue); //assigning selected value
            });
        }
    };

    $(document).ready(function () {
        ko.applyBindings(new ViewModel);
        window.onbeforeunload = function (e) {
            if (!window.btn_clicked) {
                e = e || window.event;
                if (e) {
                    e.returnValue = 'Sure?';
                }
                return 'Sure?';
            }
        };
        Selectize.define('inputMaxlength', function (options) {
            var self = this;
            this.setup = (function () {
                var original = self.setup;
                return function () {
                    original.apply(this, arguments);
                    this.$control_input.attr('maxlength', this.settings.inputMaxlength);
                };
            })();
        });
        $('#select-qualification').selectize({
            valueField: 'name',
            labelField: 'name',
            searchField: 'name',
            options: [],
            maxItems: 1,
            create: true,
            render: {
                option: function (item, escape) {
                    console.log(item.name);
                    return '<div>' +
                        '<span class="">' +
                            '<span class="name">' + escape(item.name) + '</span>' +

                        '</span>' +
                        
                        
                    '</div>';
                }
            },
            load: function (query, callback) {
                if (!query.length) return callback();
                $.ajax({
                    url: '/api/Job/SearchQualifications?s=' + encodeURIComponent(query),
                    type: 'POST',
                    error: function () {
                        callback();
                    },
                    success: function (res) {
                        callback(res.slice(0, 10));
                    }
                });
            }
        });
        $('#select-tag').selectize({
            valueField: 'name',
            labelField: 'name',
            searchField: 'name',
            options: [],
            maxItems: 6,
            create: true,
            render: {
                option: function (item, escape) {
                    return '<div>' +
                        '<span class="title">' +
                            '<span class="name">' + escape(item.name) + '</span>' +

                        '</span>' +
                        '<span class="description">' + escape(item.info) + '</span>' +
                        '<ul class="meta">' +
                            '<li class="watchers"><span>' + escape(item.followers) + '</span> followers</li>' +
                            '<li class="forks"><span>' + escape(item.questions) + '</span> times Used</li>' +
                        '</ul>' +
                    '</div>';
                }
            },
            load: function (query, callback) {
                if (!query.length) return callback();
                $.ajax({
                    url: '/api/Tag/SearchTags?s=' + encodeURIComponent(query),
                    type: 'GET',
                    error: function () {
                        callback();
                    },
                    success: function (res) {
                        callback(res.slice(0, 10));
                    }
                });
            }
        });
        $('#select-skills').selectize({
            valueField: 'name',
            labelField: 'name',
            searchField: 'name',
            options: [],
            maxItems: 6,
            create: true,
            render: {
                option: function (item, escape) {
                    return '<div>' +
                        '<span class="">' +
                            '<span class="name">' + escape(item.name) + '</span>' +

                        '</span>' +
                    '</div>';
                }
            },
            load: function (query, callback) {
                if (!query.length) return callback();
                $.ajax({
                    url: '/api/Job/SearchSkills?s=' + encodeURIComponent(query),
                    type: 'POST',
                    error: function () {
                        callback();
                    },
                    success: function (res) {
                        callback(res.slice(0, 10));
                    }
                });
            }
        });
        
        $("#post").validate({
            ignore: ':hidden:not([class~=selectized]),:hidden > .selectized, .selectize-control .selectize-input input',
            rules: {
                title: {
                    required: true,
                    maxlength: 50,
                    minlength: 15
                },
                company: {
                    required: true,
                    maxlength: 15
                },
                model: {
                    required: true,
                    maxlength: 20
                },
                description: {
                    required: true,
                    minlength: 25,
                    maxlength: 1000
                },
                color: {
                    required: true,
                    maxlength: 20
                },
                price: {
                    number: true
                },
                abc: {
                    required: true
                }
            }
        });
        $('.i-check').iCheck({
            checkboxClass: 'icheckbox_square-green',
            radioClass: 'iradio_square-green',
        });

    });
</script>

}