@model Inspinia_MVC5_SeedProject.Models.Ad

@{
    //Layout = "/Views/Shared/_Layout_Without_Signalr.cshtml";
    ViewBag.Title = "Create Laptop / Computer Ad";
}


<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-md-6">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <a class="btn btn-info btn-xs pull-right " href="../CreateAd">Post ad in another category</a>
                    <h5>Create Laptop / Computer Ad</h5>
                </div>
                <div class="ibox-content">
                    @Html.Partial("~/Views/Shared/_Dropzone.cshtml")
                    @using (Html.BeginForm("CreateLaptopAd", "Electronics", FormMethod.Post, new { id = "form" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            @Html.ValidationSummary(true)
                            <input type="hidden" name="files" id="fileNames" />
                            <div class="form-group">
                                <label class="control-label col-md-2">Select Brand<span class="req">*</span></label>
                                <div class="col-md-10">
                                    <select id="select-brand" required class="demo-default" name="brand" data-bind="options: availableBrands,
                       value: selectedBrand,
                       optionsCaption: 'Choose brand...'"></select>
                                </div>
                            </div>
                            <div data-bind="with:selectedBrand">
                                <div class="form-group">
                                    <label class="control-label col-md-2">Select Model<span class="req">*</span></label>
                                    <div class="col-md-10">
                                        <select id="select-model" required class="demo-default" name="model" data-bind="options: $parent.availableModels,
                       value: $parent.selectedModel,
                       optionsCaption: 'Choose model...'"></select>
                                    </div>
                                </div>
                            </div>



                            <div class="form-group">
                                <label class="control-label col-md-2">Color<span class="req">*</span></label>
                                <div class="col-md-10">
                                    <select id="select-color" name="color" required placeholder="choose color">
                                        <option value="">Choose color</option>
                                        <option value="white">White</option>
                                        <option value="Black">Black</option>
                                        <option value="Yellow">Yellow</option>
                                        <option value="Red">Red</option>
                                        <option value="Blue">Blue</option>
                                        <option value="Orange">Orange</option>
                                        <option value="Purple">Purple</option>
                                        <option value="Violet">Violet</option>
                                        <option value="Green">Green</option>
                                    </select>
                                </div>
                            </div>
                            @Html.Partial("~/Views/Shared/_CreateAd.cshtml")

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" data-bind="click:submitClicked" value="Create"  data-style="expand-left" class="ladda-button btn btn-primary" />
                                    @Html.ActionLink("Cancel", "ComputersLaptops", null, new { @class = "btn btn-white" })
                                </div>
                            </div>
                            @*<input type="text" id="input-tags" value="" data-selectize-value="[awesome]" />*@

                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>



@section Styles {

    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/Scripts/plugins/jquery-ui/jqueryuiStyles")
@Styles.Render("~/bundles/tagStyles")
@Styles.Render("~/bundles/myStyles")
@Styles.Render("~/Content/plugins/dropzone/dropZoneStyles")
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/plugins/autosize")
@Scripts.Render("~/plugins/dropZone")
<script src="~/Scripts/app/dropzone-knockout-binding.js"> </script>
<script src="~/Scripts/app/_CreateAd.js"></script>
    <script type="text/javascript">

        function ViewModel() {
            SearchingLocation();
            AccountViewModel();
            ChatViewModel();
            var self = this;
            UserCompanies_CreateAd(self);
            self.submitClicked = function () {
                if (isFilesUploading) {toastr.info("Please wait until images are uploaded");return;}$("input[id*='fileNames']").val(JSON.stringify(fileList));
                window.btn_clicked = true;
                $("#form").submit();
                if ($("#form").valid()) {
                    var savingBidLoader = $('.ladda-button').ladda();
                    savingBidLoader.ladda('start');
                } else {
                    toastr.info("Fields with * are mandatory!");
                }
            }
        self.typeValue = ko.observable("sell");
        self.conditionChecked = ko.observable(false);
        self.selectedVal = ko.observable();
        self.selectedVal.subscribe(function (val) {
            if (val == "fixedPrice") {
                self.isAllowBidingChecked(false);
                self.isFixPriceChecked(true);
            }
            else {
                self.isAllowBidingChecked(true);
                self.isFixPriceChecked(false);
            }
        });
        self.availableBrands = ko.observableArray();
        self.selectedBrand = ko.observable();
        self.selectedModel = ko.observable();
        var sub = self.selectedBrand.subscribe(function (value) {
            self.loadModels();
        })
        self.isAllowBidingChecked = ko.observable(false);
        self.isFixPriceChecked = ko.observable(false);

        self.loadBrands = function () {
            $.ajax({
                url: '/api/Electronic/GetLaptopBrands',
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: 'GET',
                success: function (data) {
                    $.each((data), function (i, item) { self.availableBrands.push(item) });
                    $('#select-brand').selectize({
                        create: true,
                        plugins: ['inputMaxlength'],
                        inputMaxlength: 29,
                        sortField: {
                            field: 'text',
                            direction: 'asc'
                        },

                    });
                },
                error: function (jqXHR, status, thrownError) {
                    toastr.error("failed to load Brands.Please refresh page and try again", "Error");
                }
            });
        }
        self.availableModels = ko.observableArray();
        self.selectedModel = ko.observable();
        self.loadModels = function () {
            self.availableModels.removeAll();
            $.ajax({
                url: '/api/Electronic/GetLaptopModels?brand=' + self.selectedBrand(),
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: 'GET',
                success: function (data) {
                    $.each((data), function (i, item) { self.availableModels.push(item) });
                    $('#select-model').selectize({
                        create: true,
                        plugins: ['inputMaxlength'],
                        inputMaxlength: 29,
                        sortField: {
                            field: 'text',
                            direction: 'asc'
                        },
                    });
                },
                error: function (jqXHR, status, thrownError) {
                    toastr.error("failed to load Models.Please refresh page and try again", "Error");
                }
            });
        }
        self.loadBrands();

        //location
        self.availableCities = ko.observableArray();
        self.selectedCity = ko.observable();
        self.availablePopularPlaces = ko.observableArray();
        self.selectedPopularPlace = ko.observable();
        self.loadCities = function () {
            $.ajax({
                url: '/api/Location/GetCities',
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: 'GET',
                success: function (data) {
                    $.each((data), function (i, item) { self.availableCities.push(item) });
                    $('#select-city').selectize({
                        create: true,
                        plugins: ['inputMaxlength'],
                        inputMaxlength: 39,
                        sortField: {
                            field: 'text',
                            direction: 'asc'
                        },

                    });
                },
                error: function (jqXHR, status, thrownError) {
                    toastr.error("failed to load Cities.Please refresh page and try again", "Error");
                }
            });
        }
        self.loadPopularPlaces = function () {
            self.availablePopularPlaces.removeAll();
            $.ajax({
                url: '/api/Location/GetPopularPlaces?city=' + self.selectedCity(),
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: 'GET',
                success: function (data) {
                    $.each((data), function (i, item) { self.availablePopularPlaces.push(item) });
                    $('#select-popularPlace').selectize({
                        create: true,
                        plugins: ['inputMaxlength'],
                        inputMaxlength: 49,
                        sortField: {
                            field: 'text',
                            direction: 'asc'
                        },
                    });
                },
                error: function (jqXHR, status, thrownError) {
                    toastr.error("failed to load Famous Places.Please refresh page and try again", "Error");
                }
            });
        }
        self.loadCities();
        var sub = self.selectedCity.subscribe(function (value) {
            self.loadPopularPlaces();
        })
    }
    ko.bindingHandlers.jqAutoresize = {
        init: function (element, valueAccessor, aBA, vm) {
            if (!$(element).hasClass('msgTextArea')) {
                $(element).css('height', '1em');
            }
            $(element).autosize();
        }
    };
    ko.bindingHandlers.icheck = { // integrating icheck plugin using bh
        init: function (element, valueAccessor) {
            //initialize icheck to the element
            $(element).icheck({
                radioClass: 'iradio_square-green'
            });
            $(element).on('ifChecked', function (event) {
                var observable = valueAccessor();
                observable.checked(event.target.defaultValue); //assigning selected value
            });
        }
    };

    $(document).ready(function () {
        ko.applyBindings(new ViewModel);
        window.onbeforeunload = function (e) {
            if (!window.btn_clicked) {
                e = e || window.event;
                if (e) {
                    e.returnValue = 'Sure?';
                }
                return 'Sure?';
            }
        };
        Selectize.define('inputMaxlength', function (options) {
            var self = this;
            this.setup = (function () {
                var original = self.setup;
                return function () {
                    original.apply(this, arguments);
                    this.$control_input.attr('maxlength', this.settings.inputMaxlength);
                };
            })();
        });
        $('#select-tag').selectize({
            valueField: 'name',
            labelField: 'name',
            searchField: 'name',
            options: [],
            maxItems: 4,
            create: true,
            render: {
                option: function (item, escape) {
                    return '<div>' +
                        '<span class="title">' +
                            '<span class="name">' + escape(item.name) + '</span>' +

                        '</span>' +
                        '<span class="description">' + escape(item.info) + '</span>' +
                        '<ul class="meta">' +
                            '<li class="watchers"><span>' + escape(item.followers) + '</span> followers</li>' +
                            '<li class="forks"><span>' + escape(item.questions) + '</span> times Used</li>' +
                        '</ul>' +
                    '</div>';
                }
            },
            load: function (query, callback) {
                if (!query.length) return callback();
                $.ajax({
                    url: '/api/Tag/SearchTags?s=' + encodeURIComponent(query),
                    type: 'GET',
                    error: function () {
                        callback();
                    },
                    success: function (res) {
                        callback(res.slice(0, 10));
                    }
                });
            }
        });
        $('#select-color').selectize({
            create: true,
            plugins: ['inputMaxlength'],
            inputMaxlength: 19,
            sortField: {
                field: 'text',
                direction: 'asc'
            },
        });
        $('#select-sims').selectize({
            sortField: {
                field: 'text',
                direction: 'asc'
            },
        });
        $("#form").validate({
            ignore: ':hidden:not([class~=selectized]),:hidden > .selectized, .selectize-control .selectize-input input',
            rules: {
                title: {
                    required: true,
                    maxlength: 50,
                    minlength: 15
                },
                company: {
                    required: true,
                    maxlength: 15
                },
                model: {
                    required: true,
                    maxlength: 20
                },
                description: {
                    required: true,
                    minlength: 25,
                    maxlength: 1000
                },
                color: {
                    required: true,
                    maxlength: 20
                },
                price: {
                    number: true
                },
                abc: {
                    required: true
                }
            }
        });
        $('.i-check').icheck({
            checkboxClass: 'icheckbox_square-green',
            radioClass: 'iradio_square-green',
        });

    });
</script>

}

